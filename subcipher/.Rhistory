while(T) { }
clear
a = list()
a[-1] = 2
a
a[-2] = 3
a
a = c( list(1,2,3), list(4,5,6))
a
clear
list(1,2,3)
list(list(1,2),list(3,4), list(5,6))
a = list()
a[[1] = 1
a[[1]] = 1
a
dim(P.log3)
P.log4 = getP.log.frombook("../books/LoveOfTheWildFull.txt", fullalph)
beta4 = getB.log.frombook("../books/LoveOfTheWildFull.txt", fullalph)
beta4
beta4["X"] = -12
beta4[c("*", "(", ")", 0:9), "=", "/"] = -12
beta4[c("*", "(", ")", 0:9), "=", "/")] = -12
beta4[c("*", "(", ")", 0:9), "=", "/"),] = -12
print("/")
beta4[c("*", "(", ")", 0:9, "=", "/"),] = -12
beta4[c("*", "(", ")", 0:9, "=", "/")] = -12
beta4
beta4["X"] = -21
beta4["X"] = -12
P.log4[c("
P.log4[c("*", "(", ")", 0:9, "=", "/"),] = rep(-12, 79)
P.log4
P.log4["X", ] = rep(-12, 79)
P.log
P.log4
fullalph
p1
p10
p8
p9
length(p9)
p9[1:20]
r = breakCipher(p9, beta4, P.log4, fullalph, 10000)
r
cipher9
length(cipher9)
cipher10 = createSubCiph(length(fullalph))
c10
c10 = applycipher.num(cipher10, p9)
c10
r = breakCipher(c10, beta4, P.log4, fullalph, 10000 )
r
cipher10
r = breakCipher(c10, beta4, P.log4, fullalph, 50000 )
r
cipher10
cipher10[1:26] == res$data[[10]][1:26]
cipher10[1:26] == res$data[[10]][1:26]
cipher10
cipher10[1:26] == r$data[[10]][1:26]
r = breakCipher(c10, beta4, P.log4, fullalph, 50000 )
r
r$data
r[[1]]

clear
p1
p2
p3
p4
p5
p5
p6
p7
p8
p9
p9[1:20]
p8[1:20]
p10
p20 = readLines("../books/LoveOfTheWildFull.txt")
p20 = paste(readLines("../books/LoveOfTheWildFull.txt"))
p20
p20 = paste(readLines("../books/LoveOfTheWildFull.txt"), collapse='')
p20
p20 = convertMessageToNumeric(strsplit(p20, '')[[1]], fullalph)
p20
p20[1:30]
clear
cipher20 = createSubCiph(alphlength=length(fullalph))
cipher20
c20 = applycipher.num(cipher20, p20)
c20
breakCipher(c20, beta4, P.log4, fullalph, 50000)

r = breakCipher(c20, beta4, P.log4, fullalph, 50000)
r[[2]]$data
cipher20
r[[2]]$data[[10]] = cipher
r[[2]]$data[[9]] == cipher
r[[2]]$data[[9]] == cipher20

res
res[[2]]
res
res[[2]
res
res$data[[2]]
cipher20
cipher10
r = breakCipher(c20, beta4, P.log4, fullalph, 50000)
r
r[[2]]$data[[10]]
cipher20 =
r[[2]]$data[[10]] == cipher20
r = breakCipher(c20, beta4, P.log4, fullalph, 10000)
r[[2]]$data[[10]] == cipher20
sum((r[[2]]$data[[10]] == cipher20)[1:26])
sum(26 - (r[[2]]$data[[10]] == cipher20)[1:26])
sum(26 - (r[[2]]$data[[10]] == cipher20)[1:26])
sum( (r[[2]]$data[[10]] == cipher20)[1:26])
sum( (r[[2]]$data[[10]] == cipher20)[1:26] - 26)
sum( (r[[2]]$data[[10]] == cipher20)[1:26])
2-  (r[[2]]$data[[10]] == cipher20)[1:26])=
2-  (r[[2]]$data[[10]] == cipher20)[1:26]
26 - sum( (r[[2]]$data[[10]] == cipher20)[1:26])
r = breakCipher(c20, beta4, P.log4, fullalph, 10000)
26 - sum( (r[[2]]$data[[10]] == cipher20)[1:26])
r[[2]]$data[[10]]
#r[[2]]$data[[10]]
breakWithDictionary(c20, r[[2]]$data[[10]], dictionary=2, 100, fullalph)
breakWithDictionary(c20, r[[2]]$data[[10]], dictionary=2, 10, fullalph)
dres = breakWithDictionary(c20, r[[2]]$data[[10]], dictionary=2, 10, fullalph)
dres
cipher20 == dres$data
cipher20 == dres$data[[1]]
cipher20 == dres$data[[2]]
cipher20 == dres$data[[3]]
applycipher.num(inverseSubC(dres$data[[3]]), c20)
applycipher.num(inverseSubCipher(dres$data[[3]]), c20)
convertNumericToMessage(applycipher.num(inverseSubCipher(dres$data[[3]]), c20), fullalph)
convertNumericToMessage(applycipher.num(inverseSubCipher(dres$data[[3]]), c20), fullalph)[1:400]
convertNumericToMessage(applycipher.num(inverseSubCipher(r[[2]]$data[[10]]), c20), fullalph)[1:400]
paste(convertNumericToMessage(applycipher.num(inverseSubCipher(r[[2]]$data[[10]]), c20), fullalph)[1:400], collapse='')
dres = breakWithDictionary(c20, r[[2]]$data[[10]], dictionary2, 10, fullalph)
f
f = Vectorize(isLowerCaseWord)
d
d = c(readLines("../scowl-2018.04.16/final/english-words.10"), readLines("../scowl-2018.04.16/final/english-words.20"), readLines("../scowl-2018.04.16/final/english-words.35"), readLines("../scowl-2018.04.16/final/english-words.40"))
d
sort(d)
d = sort(d)
f
d = d[f(d) ==TRUE]
warnings()
f(d)
d = d[f(d)]
d
dres = breakWithDictionary(c20, r[[2]]$data[[10]], d, 10, fullalph)
p20
length(p20)
source("breakSubCypher.R); dres = breakWithDictionary(c20, r[[2]]$data[[10]], d, 10, fullalph)
source("breakSubCypher.R"); dres = breakWithDictionary(c20, r[[2]]$data[[10]], d, 10, fullalph)
source("breakSubCypher.R); dres = breakWithDictionary(c20, r[[2]]$data[[10]], d, 10, fullalph)
source("breakSubCypher.R"); dres = breakWithDictionary(c20, r[[2]]$data[[10]], d, 10, fullalph)
source("breakSubCypher.R"); dres = breakWithDictionary(c20, r[[2]]$data[[10]], d, 10, fullalph)
source("breakSubCypher.R"); dres = breakWithDictionary(c20, r[[2]]$data[[10]], d, 10, fullalph)
source("breakSubCypher.R"); dres = breakWithDictionary(c20, r[[2]]$data[[10]], d, 10, fullalph)
source("breakSubCypher.R"); dres = breakWithDictionary(c20, r[[2]]$data[[10]], d, 10, fullalph)
source("breakSubCypher.R"); dres = breakWithDictionary(c20, r[[2]]$data[[10]], d, 10, fullalph)
source("breakSubCypher.R"); dres = breakWithDictionary(c20, r[[2]]$data[[10]], d, 10, fullalph)
dres
dres$data
source("breakSubCypher.R"); dres = breakWithDictionary(c20, r[[2]]$data[[10]], d, 10, fullalph)
source("breakSubCypher.R"); dres = breakWithDictionary(c20, r[[2]]$data[[10]], d, 10, fullalph)
c20
length(c20)
p20
length(p20)
p20 = p20[1:2000]
c20 = c20[1:2000]
p20[1:100]
p20 = convertMessageToNumeric(strsplit(paste(readLines("../books/MagicShopEx2.txt"), collapse='\n'), '')[[1]], fullalph)
p20
length(p20)
cipher20
c20 = applycipher.num(cipher20, p20)
source("breakSubCypher.R"); dres = breakWithDictionary(c20, r[[2]]$data[[10]], d, 10, fullalph)
source("breakSubCypher.R"); dres = breakWithDictionary(c20, r[[2]]$data[[10]], d, 10, fullalph)
dres
cipher
r[[2]]$data[[10]]
r[[2]]$data[[10]] == cipher20
dres$data[[2]] == cipher20
sum(dres$data[[2]] == cipher20)
sum(r[[2]]$data[[10]] == cipher20)
26 - sum(r[[2]]$data[[10]][1:26] == cipher20[1:26])
26 - sum(dres$data[[2]][1:26] == cipher20[1:26])
source("breakSubCypher.R"); dres = breakWithDictionary(c20, r[[2]]$data[[10]], d, 100, fullalph)
dres$data
cipher20
writeResult(dres, c20, fullalph)#dres$data
dres
26 - sum(dres$data[[10]][1:26] == cipher20[1:26])
26 - sum(dres$data[[1]][1:26] == cipher20[1:26])
26 - sum(dres$data[[2]][1:26] == cipher20[1:26])
26 - sum(dres$data[[3]][1:26] == cipher20[1:26])
26 - sum(dres$data[[4]][1:26] == cipher20[1:26])
26 - sum(dres$data[[5]][1:26] == cipher20[1:26])
26 - sum(dres$data[[6]][1:26] == cipher20[1:26])
26 - sum(dres$data[[7]][1:26] == cipher20[1:26])
26 - sum(dres$data[[8]][1:26] == cipher20[1:26])
26 - sum(dres$data[[9]][1:26] == cipher20[1:26])
26 - sum(dres$data[[10]][1:26] == cipher20[1:26])
source("breakSubCypher.R"); dres = breakWithDictionary(c20, r[[2]]$data[[10]], d, 100, fullalph)
writeResult(dres, c20, fullalph)#dres$data
length("bob")
length(as.char("bob"))
length(as.character("bob"))
as.character("bob")
nchar(as.character("bob"))
nchar("bob")
source("breakSubCypher.R"); dres = breakWithDictionary(c20, r[[2]]$data[[10]], d, 100, fullalph)
source("breakSubCypher.R"); dres = breakWithDictionary(c20, r[[2]]$data[[10]], d, 100, fullalph)
source("breakSubCypher.R"); dres = breakWithDictionary(c20, r[[2]]$data[[10]], d, 100, fullalph)
source("breakSubCypher.R"); dres = breakWithDictionary(c20, r[[2]]$data[[10]], d, 100, fullalph)
source("breakSubCypher.R"); dres = breakWithDictionary(c20, r[[2]]$data[[10]], d, 100, fullalph)
dres
cipher20
writeResult(dres, c20, fullalph)#dres$data
source("breakSubCypher.R"); dres = breakWithDictionary(c20, r[[2]]$data[[10]], d, 100, fullalph)
source("breakSubCypher.R"); dres = breakWithDictionary(c20, r[[2]]$data[[10]], d, 1000, fullalph)
dres
source("breakSubCypher.R"); dres = breakWithDictionary(c20, r[[2]]$data[[10]], d, 1000, fullalph)
source("breakSubCypher.R"); dres = breakWithDictionary(c20, r[[2]]$data[[10]], d, 100, fullalph)
dres
dres$data[[10]]
cipher20
cipher20[1:26] == dres$data[[10]]
(cipher20 == dres$data[[10]])[1:26]
sum((cipher20 == dres$data[[10]])[1:26])
26 - sum((cipher20 == dres$data[[10]])[1:26])
source("breakSubCypher.R"); dres = breakWithDictionary(c20, r[[2]]$data[[10]], d, 100, fullalph)
dres
source("breakSubCypher.R"); dres = breakWithDictionary(c20, r[[2]]$data[[10]], d, 1000, fullalph)
source("breakSubCypher.R"); dres = breakWithDictionary(c20, r[[2]]$data[[10]], d, 1000, fullalph)
dres
26 - sum((cipher20 == dres$data[[10]])[1:26])
26 - sum((cipher20 == r2$data[[10]])[1:26])
26 - sum((cipher20 == r[[2]]$data[[10]])[1:26])
source("breakSubCypher.R"); dres = breakWithDictionary(c20, r[[2]]$data[[10]], d, 100, fullalph)
source("breakSubCypher.R"); dres = breakWithDictionary(c20, r[[2]]$data[[10]], d, 100, fullalph)
source("breakSubCypher.R"); dres = breakWithDictionary(c20, r[[2]]$data[[10]], d, 1000, fullalph)
dres
cipher20
writeResult(dres, c20, fullalph)
source("breakSubCypher.R"); dres = breakWithDictionary(c20, r[[2]]$data[[10]], d, 1000, fullalph)
source("breakSubCypher.R"); dres = breakWithDictionary(c20, r[[2]]$data[[10]], d, 100, fullalph)
source("breakSubCypher.R"); dres = breakWithDictionary(c20, r[[2]]$data[[10]], d, 1, fullalph)
source("breakSubCypher.R"); dres = breakWithDictionary(c20, r[[2]]$data[[10]], d, 1, fullalph)
source("breakSubCypher.R"); dres = breakWithDictionary(c20, r[[2]]$data[[10]], d, 1, fullalph)
source("breakSubCypher.R"); dres = breakWithDictionary(c20, r[[2]]$data[[10]], d, 1, fullalph)
source("breakSubCypher.R"); dres = breakWithDictionary(c20, r[[2]]$data[[10]], d, 1, fullalph)
source("breakSubCypher.R"); dres = breakWithDictionary(c20, r[[2]]$data[[10]], d, 2, fullalph)
source("breakSubCypher.R"); dres = breakWithDictionary(c20, r[[2]]$data[[10]], d, 2, fullalph)
length(fullalph)
c21 = 1:79
sample(1:79, 4)
sample(1:79, 6)
sample(1:79, 4)
s = sample(1:79, 4)
s
c21[s] = c21[c(12, 38, 13, 79)]
c21
c21
cipher21 = c21
p20
c21 = applycipher.num(cipher21, p200
c21 = applycipher.num(cipher21, p20)
c21
source("breakSubCypher.R"); dres = breakWithDictionary(c21, 1:79, d, 2, fullalph)
source("breakSubCypher.R"); dres = breakWithDictionary(c21, 1:79, d, 100, fullalph)
dres
source("breakSubCypher.R"); dres = breakWithDictionary(c21, 1:79, d, 100, fullalph)
dres
source("breakSubCypher.R"); dres = breakWithDictionary(c21, 1:79, d, 1000, fullalph)
dres
source("breakSubCypher.R"); dres = breakWithDictionary(c21, 1:79, d, 100, fullalph)
dres
source("breakSubCypher.R"); dres = breakWithDictionary(c21, 1:79, d, 100, fullalph)
dres
source("breakSubCypher.R"); dres = breakWithDictionary(c21, 1:79, d, 100, fullalph)
dres
dres$data[[8]] == cipher21
source("breakSubCypher.R"); dres = breakWithDictionary(c21, 1:79, d, 1000, fullalph)
dres
dres$data[[10]] == cipher20
dres$data[[10]] == cipher21
cipher21
cipher21 == 1:79
source("breakSubCypher.R"); dres = breakWithDictionary(c21, 1:79, d, 1000, fullalph)
dres
text
text(2)
text("blkja;dsklfaj;2)
text("blkja;dsklfaj;2")
source("breakSubCypher.R"); dres = breakWithDictionary(c21, 1:79, d, 1000, fullalph)
source("breakSubCypher.R"); dres = breakWithDictionary(c21, 1:79, d, 1000, fullalph)
source("breakSubCypher.R"); dres = breakWithDictionary(c21, 1:79, d, 1000, fullalph)
dres
c11
c21
charactersNotInWord(convertNumericToMessage(c21, fullalph), d)
d
convertNumericToMessage(c21, fullalph)
paste(convertNumericToMessage(c21, fullalph), collapse='')
p20
paste(p20, collapse='')
paste(convertNumericToMessage(p20, fullalph), collapse='')
charactersNotInWord(paste(convertNumericToMessage(c21, fullalph), collapse=''), d)
dres
writeResult(dres, c21)
writeResult(dres, c21, fullalph)
source("breakSubCypher.R"); dres = breakWithDictionary(c21, 1:79, d, 1000, fullalph)
dres
dres$data[[10]] == cipher21
cipher21 == 1:79
source("breakSubCypher.R"); dres = breakWithDictionary(c21, 1:79, d, 1000, fullalph)
source("breakSubCypher.R"); dres = breakWithDictionary(c21, 1:79, d, 1000, fullalph)
source("breakSubCypher.R"); dres = breakWithDictionary(c21, 1:79, d, 1000, fullalph)
source("breakSubCypher.R"); dres = breakWithDictionary(c21, 1:79, d, 1000, fullalph)
d
match("i", d)
isInDictionary("i", d)
d[18533]
d[18533:18555]
d[18433:18555]
source("breakSubCypher.R"); dres = breakWithDictionary(c21, 1:79, d, 1000, fullalph)
source("breakSubCypher.R"); dres = breakWithDictionary(c21, 1:79, d, 1000, fullalph)
source("breakSubCypher.R"); dres = breakWithDictionary(c21, 1:79, d, 1000, fullalph)
match("wave", d)
source("breakSubCypher.R"); dres = breakWithDictionary(c21, 1:79, d, 1000, fullalph)
in
source("breakSubCypher.R"); dres = breakWithDictionary(c21, 1:79, d, 1000, fullalph)
source("breakSubCypher.R"); dres = breakWithDictionary(c21, 1:79, d, 1000, fullalph)
source("breakSubCypher.R"); dres = breakWithDictionary(c21, 1:79, d, 100, fullalph)
source("breakSubCypher.R"); dres = breakWithDictionary(c21, 1:79, d, 20, fullalph)
res
dres
cipher21
source("breakSubCypher.R"); dres = breakWithDictionary(c21, 1:79, d, 20, fullalph)
source("breakSubCypher.R"); dres = breakWithDictionary(c21, 1:79, d, 100, fullalph)
dres
source("breakSubCypher.R"); dres = breakWithDictionary(c21, 1:79, d, 100, fullalph)
source("breakSubCypher.R"); dres = breakWithDictionary(c21, 1:79, d, 100, fullalph)
source("breakSubCypher.R"); dres = breakWithDictionary(c21, 1:79, d, 1000, fullalph)
source("breakSubCypher.R"); dres = breakWithDictionary(c21, 1:79, d, 1000, fullalph)
dres
length(p21)
length(c21)
source("breakSubCypher.R"); dres = breakWithDictionary(c21, 1:79, d, 1000, fullalph)
source("breakSubCypher.R"); dres = breakWithDictionary(c21, 1:79, d, 1000, fullalph)
char.not.in.word2
source("breakSubCypher.R"); dres = breakWithDictionary(c21, 1:79, d, 100, fullalph)
char.not.in.word2
source("breakSubCypher.R"); dres = breakWithDictionary(c21, 1:79, d, 100, fullalph)
source("breakSubCypher.R"); dres = breakWithDictionary(c21, 1:79, d, 100, fullalph)
source("breakSubCypher.R"); dres = breakWithDictionary(c21, 1:79, d, 100, fullalph)
char.not.in.word2
source("breakSubCypher.R"); dres = breakWithDictionary(c21, 1:79, d, 100, fullalph)
char.not.in.word2
plot(char.not.in.word2)
source("breakSubCypher.R"); dres = breakWithDictionary(c21, 1:79, d, 100, fullalph)
source("breakSubCypher.R"); dres = breakWithDictionary(c21, 1:79, d, 100, fullalph)
dres
source("breakSubCypher.R"); dres = breakWithDictionary(c21, 1:79, d, 100, fullalph)
source("breakSubCypher.R"); dres = breakWithDictionary(c21, 1:79, d, 100, fullalph)
length(c21)
source("breakSubCypher.R"); dres = breakWithDictionary(c21, 1:79, d, 100, fullalph)
source("breakSubCypher.R"); dres = breakWithDictionary(c21, 1:79, d, 100, fullalph)
#source("breakSubCypher.R"); dres = breakWithDictionary(c21, 1:79, d, 100, fullalph)
sigma = 1:79
 ciphertext.num = c21
start.key = 1:79
dictionary = d
M = 100
alph =fullalph
 sigma = start.key
sigma
possible.plaintext = applycipher.num(inverseSubCipher(sigma), ciphertext.num)
possible
possible.plaintext
pi.sigma = exp(- charactersNotInWord(paste(convertNumericToMessage(possible.plaintext, alph), collapse= ''), dictionary)/10000)
pi.sigma
 pq = PriorityQueue$new()
pq
j =1
    ij = sample(1:length(start.key),2, replace=FALSE)
ij
 phi = sigma
    phi[ij[1]] = sigma[ij[2]]
    phi[ij[2]] = sigma[ij[1]]
phi
 possible.plaintext = applycipher.num(inverseSubCipher(phi), ciphertext.num)
possible.plaintext
possible.words = paste(convertNumericToMessage(possible.plaintext, alph), collapse = '')
possible.words
 char.not.in.word = charactersNotInWord(possible.words, dictionary)/10000
char.not.in.word
pi.phi = exp(-char.not.in.word)
pi.phi
phi = sigma
    phi[ij[1]] = sigma[ij[2]]
    phi[ij[2]] = sigma[ij[1]]
 ij = sample(1:length(start.key),2, replace=FALSE)
    phi = sigma
    phi[ij[1]] = sigma[ij[2]]
    phi[ij[2]] = sigma[ij[1]]
pi.phi = exp(-char.not.in.word)
pi.phi
 possible.plaintext = applycipher.num(inverseSubCipher(phi), ciphertext.num)
    possible.words = paste(convertNumericToMessage(possible.plaintext, alph), collapse = '')
    #word.count = 0
    #not.word.count = 0
    char.not.in.word = charactersNotInWord(possible.words, dictionary)/10000
pi.phi = exp(-char.not.in.word)
pi.phi
phi =sigma
possible.plaintext = applycipher.num(inverseSubCipher(phi), ciphertext.num)
    possible.words = paste(convertNumericToMessage(possible.plaintext, alph), collapse = '')
    #word.count = 0
    #not.word.count = 0
    char.not.in.word = charactersNotInWord(possible.words, dictionary)/10000
 pi.phi = exp(-char.not.in.word)
pi.phi
pi.sigma
   ij = sample(1:length(start.key),2, replace=FALSE)
    phi = sigma
    phi[ij[1]] = sigma[ij[2]]
    phi[ij[2]] = sigma[ij[1]]
    possible.plaintext = applycipher.num(inverseSubCipher(phi), ciphertext.num)
    possible.words = paste(convertNumericToMessage(possible.plaintext, alph), collapse = '')
    #word.count = 0
    #not.word.count = 0
    char.not.in.word = charactersNotInWord(possible.words, dictionary)/10000
    #print(convertNumericToMessage(possible.plaintext, alph))
    char.not.in.word2[j] <<- char.not.in.word
    print(char.not.in.word2)
    cat("chars not in words : ", char.not.in.word, "\n")
    pi.phi = exp(-char.not.in.word)
pi.phi
char.not.in.word
 alpha = min(1, pi.phi / pi.sigma)
alpha
rbinom(1,1,alpha)
rbinom(1,1,alpha)
rbinom(1,1,alpha)
rbinom(1,1,alpha)
rbinom(1,1,alpha)
rbinom(1,1,alpha)
rbinom(1,1,alpha)
rbinom(1,1,alpha)
rbinom(1,1,alpha)
rbinom(1,1,alpha)
rbinom(1,1,alpha)
rbinom(1,1,alpha)
rbinom(1,1,alpha)
if(rbinom(1,1,alpha))
rbinom(1,1,alpha){1}else{0}
if(rbinom(1,1,alpha)){1}else{0}
if(rbinom(1,1,alpha)){1}else{0}
if(rbinom(1,1,alpha)){1}else{0}
if(rbinom(1,1,alpha)){1}else{0}
if(rbinom(1,1,alpha)){1}else{0}
if(rbinom(1,1,alpha)){1}else{0}
if(rbinom(1,1,alpha)){1}else{0}
if(rbinom(1,1,alpha)){1}else{0}
if(rbinom(1,1,alpha)){1}else{0}
if(rbinom(1,1,alpha)){1}else{0}
if(rbinom(1,1,alpha)){1}else{0}
if(rbinom(1,1,alpha)){1}else{0}
source("breakSubCypher.R"); dres = breakWithDictionary(c21, 1:79, d, 100, fullalph)
source("breakSubCypher.R"); dres = breakWithDictionary(c21, 1:79, d, 100, fullalph)
source("breakSubCypher.R"); dres = breakWithDictionary(c21, 1:79, d, 100, fullalph)
source("breakSubCypher.R"); dres = breakWithDictionary(c21, 1:79, d, 100, fullalph)
source("breakSubCypher.R"); dres = breakWithDictionary(c21, 1:79, d, 5, fullalph)
source("breakSubCypher.R"); dres = breakWithDictionary(c21, 1:79, d, 5, fullalph)
source("breakSubCypher.R"); dres = breakWithDictionary(c21, 1:79, d, 5, fullalph)
source("breakSubCypher.R"); dres = breakWithDictionary(c21, 1:79, d, 20, fullalph)
source("breakSubCypher.R"); dres = breakWithDictionary(c21, 1:79, d, 20, fullalph)
source("breakSubCypher.R"); dres = breakWithDictionary(c21, 1:79, d, 50, fullalph)
source("breakSubCypher.R"); dres = breakWithDictionary(c21, 1:79, d, 50, fullalph)
source("breakSubCypher.R"); dres = breakWithDictionary(c21, 1:79, d, 50, fullalph)
plot(not.in.word.sig.vec)
source("breakSubCypher.R"); dres = breakWithDictionary(c21, 1:79, d, 50, fullalph)
plot(not.in.word.sig.vec[1:50])
source("breakSubCypher.R"); dres = breakWithDictionary(c21, 1:79, d, 50, fullalph)
plot(not.in.word.sig.vec[1:50])
source("breakSubCypher.R"); dres = breakWithDictionary(c21, 1:79, d, 500, fullalph)
plot(not.in.word.sig.vec[1:50])
plot(not.in.word.sig.vec[1:500])
source("breakSubCypher.R"); dres = breakWithDictionary(c21, 1:79, d, 500, fullalph)
plot(not.in.word.sig.vec[1:500])
source("breakSubCypher.R"); dres = breakWithDictionary(c21, 1:79, d, 500, fullalph)
source("breakSubCypher.R"); dres = breakWithDictionary(c21, 1:79, d, 500, fullalph)
plot(not.in.word.sig.vec[1:500])
dres
cipher21
cipher21 == dres$data[[10]]
1:79 == cipher21
k
q()
