length(plaintext)
length(plaintext)
book = paste(readLines("../books/LoveOfTheWildFull.txt"), collapse = '')
bok
book
book.num = convertMessageToNumeric(length(strsplit(book, '')[[1]]), fullalp
source("breakSubCypher.R")
source("makeSubCyper.R")
source("makeSubCyper.R")
book.num = convertMessageToNumeric(length(strsplit(book, '')[[1]]), fullalph)
book.num = convertMessageToNumeric(length(strsplit(book, '')[[1]]), lotwfullalph)
book.num = convertMessageToNumeric(strsplit(book, '')[[1]]), lotwfullalph)
book.num = convertMessageToNumeric(strsplit(book, '')[[1]], lotwfullalph)
book.num[1:40]
book[1:40]
book
P.log = getP.log(book.num, lotwfullalph)
booknumvec
book.num
book.num  == booknumvec
all(book.num  == booknumvec)
P.log = getP.log(book.num, lotwfullalph)
source("breakSubCypher.R")
P.log = getP.log(book.num, lotwfullalph)
source("breakSubCypher.R")
P.log = getP.log(book.num, lotwfullalph)
book.num[2]l
is.na(book.num)
all(is.na(book.num))
all(! is.na(book.num))
lotwfullalph
source("makeSubCyper.R")
lotwfullalph
P.log = getP.log(book.num, lotwfullalph)
source("breakSubCypher.R")
source("breakSubCypher.R")
P.log = getP.log(book.num, lotwfullalph)
source("breakSubCypher.R")
P.log = getP.log(book.num, lotwfullalph)
a = matrix( 1:4, ncol = 2)
a
apply?
?apply
apply(a, 2, function(x) { print(x)})
source("breakSubCypher.R")
P.log = getP.log(book.num, lotwfullalph)
source("breakSubCypher.R")
P.log = getP.log(book.num, lotwfullalph)
source("breakSubCypher.R")
source("breakSubCypher.R")
P.log = getP.log(book.num, lotwfullalph)
source("breakSubCypher.R")
P.log = getP.log(book.num, lotwfullalph)
source("breakSubCypher.R")
P.log = getP.log(book.num, lotwfullalph)
?apply
source("breakSubCypher.R")
P.log = getP.log(book.num, lotwfullalph)
source("breakSubCypher.R")
P.log = getP.log(book.num, lotwfullalph)
source("breakSubCypher.R")
P.log = getP.log(book.num, lotwfullalph)
source("breakSubCypher.R")
P.log = getP.log(book.num, lotwfullalph)
P.log
P.log[1:20, 1:20]
getBeta(book.num, lotwfullalph)
lotwfullalph
cipher = createSubCiph(length(lotwfullalph))
cipher
plaintext
plaintext.num
ciphertext.num = applycipher.num(plaintext.num, lotwfullalph)
ciphertext.num
ciphertext.num = applycipher.num(plaintext.num, lotwfullalph)
ciphertext.num
ciphertext.num = applycipher.num(lotwfullalph, plaintext.num)
ciphertext.num
cipher
cipher = createSubCiph(length(lotwfullalph))
ciphertext.num = applycipher.num(cipher, plaintext.num)
ciphertext.num
breakCipher(ciphertext.num, beta = beta, P = P.log, alphabet= lotwfullalph, M =1000)
convertNumericToMessage(applycipher.num(res$data[[10]], ciphertext.num), lotwfullalph)
res = breakCipher(ciphertext.num, beta = beta, P = P.log, alphabet= lotwfullalph, M =1000)
convertNumericToMessage(applycipher.num(res$data[[10]], ciphertext.num), lotwfullalph)
ciphertext.num
convertNumericToMessage(applycipher.num(res$data[[10]], ciphertext.num, lotwfullalph), lotwfullalph)
convertNumericToMessage(applycipher.num(res$data[[10]], ciphertext.num), lotwfullalph)
res = breakCipher(ciphertext.num, beta = beta, P = P.log, alphabet= lotwfullalph, M =10000)
inverseSubCipher(cipher)
res$data[[10]]
P.log
P.log[P.log == 0]
q()
P.log
lotwfullalph[53,74]
lotwfullalph[53]
war.and.peace = 
book.num
p1 = getP.log(book.num)
p1 = getP.log(book.num, lotwfullalph)
p
pq
p1
source("breakSubCypher.R")
p1 = getP.log(book.num, lotwfullalph)

lotwfullalph
p1 = getP.log(book.num, lotwfullalph)
alph.simp
source("breakSubCypher.R")
p1 = getP.log(book.num, lotwfullalph)
source("breakSubCypher.R")
p1 = getP.log(book.num, lotwfullalph)
source("breakSubCypher.R")
p1 = getP.log(book.num, lotwfullalph)
source("breakSubCypher.R")
p1 = getP.log(book.num, lotwfullalph)
lotwfullalph
lotwfullalph[74]
source("breakSubCypher.R")
p1 = getP.log(book.num, lotwfullalph)
book.num[185872]
book.num[]
convertMessageToNumeric(book, 
strsplit(book, '')
a = strsplit(book, '')
a[1:100]
a[[1]][1:100]
a[[1]][1:200]
a[[1]][1000:2000]
a[[1]][1345]
a[[1]][1355]
a[[1]][1352]
a[[1]][1351]
a[[1]][1352]
a[[1]][1353]
a[[1]][1354]
source("makeSubCyper.R")
lotw.num = convertMessageToNumeric(strsplit(book, ''), lotwfullalph)
lotw.num = convertMessageToNumeric(strsplit(book, '')[[1]], lotwfullalph)
lotw.num
P.log = getP.log(lotw.num, lotwfullalph)
P.log
P.log = getP.log(lotw.num, lotwfullalph)
source("breakSubCypher.R")
source("breakSubCypher.R")
P.log = getP.log(lotw.num, lotwfullalph)
lotw.num == boo.num
lotw.num == book.num
all(lotw.num == book.num)
lotwfullalph[74]
P.log = getP.log(lotw.num, lotwfullalph)
lotw.num[185872]
lotwfullalph
unique(lotwfullalph)
source("breakSubCypher.R")
lotw.num = convertMessageToNumeric(strsplit(book, '')[[1]], lotwfullalph)
length(lotw.num)
lotw.num
P.log = getP.log(lotw.num, lotwfullalph)
source("breakSubCypher.R")
P.log = getP.log(lotw.num, lotwfullalph)
source("breakSubCypher.R")
P.log = getP.log(lotw.num, lotwfullalph)
source("breakSubCypher.R")
P.log = getP.log(lotw.num, lotwfullalph)
source("breakSubCypher.R")
P.log = getP.log(lotw.num, lotwfullalph)
is.na(lotw.num)

source("breakSubCypher.R")
P.log = getP.log(lotw.num, lotwfullalph)
source("breakSubCypher.R")
P.log = getP.log(lotw.num, lotwfullalph)
source("breakSubCypher.R")
P.log = getP.log(lotw.num, lotwfullalph)
lotw.num[41463]
lotw.num[41464]
lotw.num[414664]kjkjkk
source("breakSubCypher.R")
source("breakSubCypher.R")kj
source("breakSubCypher.R")
source("breakSubCypher.R")
book
convertMessageToNumeric(strsplit(book, '')[[1]], lotwfullalph)
lotw.num = convertMessageToNumeric(strsplit(book, '')[[1]], lotwfullalph)
all(lotw.num == book.num)
P.log = getP.log(lotw.num, lotwfullalph)
P.log
P.log
P.log
max(P.log)
lotw.split = strsplit(book, '')
source("breakSubCypher.R")
P.log = getP.log(lotw.num, lotwfullalph)
source("breakSubCypher.R")
P.log = getP.log(lotw.num, lotwfullalph)
source("breakSubCypher.R")
P.log = getP.log(lotw.num, lotwfullalph)
source("breakSubCypher.R")
P.log = getP.log(lotw.num, lotwfullalph)
source("breakSubCypher.R")
P.log = getP.log(lotw.num, lotwfullalph)
lotw.split[185872]
lotw.split[[1]][185872]
lotw.split[[1]][185872: 185882]
lotw.num[185872: 185882]
lotw.num[185862: 185882]
lotwfullalph[53]
lotwfullalph[79]
P.log[53,]
P
extractAIC
plaintext
encryptplaintext.num
ciphertext.num
cipher = createSubCiph(alphlength=length(lotwfullalph))
cipher
length(lotwfullalph)
beta = getBeta(lotw.num)
beta = getBeta(lotw.num, lotwfullalph)
beta
cipher
ciphertext.num = applycipher.num(plaintext.num, cipher)
ciphertext.num
ciphertext.num = applycipher.num(cipher, plaintext.num)
ciphertext.num
plaintext.num
length(plaintext.num)
length(ciphertext.num)
breakCipher(ciphertext.num beta, P.log, lotwfullalph, 1000)
breakCipher(ciphertext.num, beta, P.log, lotwfullalph, 1000)
cipher
inverseSubCipher(cipher)
breakCipher(ciphertext.num, beta, P.log, lotwfullalph, 10000)
res = breakCipher(ciphertext.num, beta, P.log, lotwfullalph, 10000)
res
res$data[[1]]
applycipher.num(res$data[[1]], ciphertext.num)
convertNumericToMessage(applycipher.num(res$data[[1]], ciphertext.num), lotwfullalph_
convertNumericToMessage(applycipher.num(res$data[[1]], ciphertext.num), lotwfullalph)
book.simp
lotw.simp = paste(book.simp, collapse = '')
lotw.simp
alph.simp
book.simp.num = convertMessageToNumeric(book.simp, alph.simp)
book.simp.num
lotw.simp = paste(lotw.simp, collapse = '')
lotw.simp
lotw.simp.num = convertMessageToNumeric(lotw.simp, alph.simp)
lotw.simp.num
length(lotw.simp.num)
P.log.simp = getP.log(lotw.simp, alph.simp)
P.log.simp = getP.log(lotw.simp.num, alph.simp)
source("breakSubCypher.R")
P.log.simp = getP.log(lotw.simp.num, alph.simp)
P.log.simp
beta.simp = getBeta(lotw.simp.num, alph.simp)
cipher = createSubCiph(length(alph.simp))
cipher
length(cipher)
plaintext
alph.simp
alph.simp = c(alph.simp, "\"")
lotw.simp.num = convertMessageToNumeric(lotw.simp, alph.simp)
cipher = createSubCiph(length(alph.simp))
beta.simp = getBeta(lotw.simp.num, alph.simp)
P.log.simp = getP.log(lotw.simp.num, alph.simp)
lower(plaintext)
tolower(plaintext)
p1 = tolower(plaintext)
p1
p1.num = convertMessageToNumeric(p1, alph.simp)
p1.num
cipher
length(cipher)
length(alph.simp)
plaintext
p1
p1.num
c1 = applycipher.num(cipher = cipher, plaintext.num = p1.num)
c1
length(p1.num)
alph.simp
alph.simp[7]
match(" ",alph.simp)
match("g",alph.simp)
alph.simp[7] == 27
alph.simp == 27
c1 == 27
cipher
cipher[27]
breakCipher(ciphertext.num = c1, beta = beta.simp, P.log.simp, alphabet=alph.simp, 1000)
res = breakCipher(ciphertext.num = c1, beta = beta.simp, P.log.simp, alphabet=alph.simp, 1000)res
length(res$data)res
write("
write("test.txt", "bob")
write("test.txt2", "bob")
string(2)
char(2)
character(2)
character(100)
a = character(100)
a[1] = "alkjsdl;f"
a
res$data[[1]]
res$data[[2]]
res$data[2]
res$data[1]
res$data[2]
res$data[3]
res$data[1:10]
res$data[[1:10]]
res$data[[2]]
paste(c("a", "b", "c"), collapse = " ")
source("breakSubCypher.R")
source("breakSubCypher.R")
source("breakSubCypher.R")
c1
writeResult(res, c1, alph.simp)
length(res$data)
length(res$data[[1]])
length(res$data[1])
source("breakSubCypher.R")
writeResult(res, c1, alph.simp
writeResult(res, c1, alph.simp)
source("breakSubCypher.R")
writeResult(res, c1, alph.simp)
?writere
source("breakSubCypher.R")
res
writeResult(res, c1, alph.simp)
source("breakSubCypher.R")
writeResult(res, c1, alph.simp)
convertNumericToMessage(res$data[[10]], c1))
convertNumericToMessage(res$data[[10]], c1)
convertNumericToMessage(c1, res$data[[10]])
source("breakSubCypher.R")
writeResult(res, c1, alph.simp)
source("breakSubCypher.R")
writeResult(res, c1, alph.simp)
convertNumericToMessage(c1, res$data[[10]])f
source("breakSubCypher.R")
writeResult(res, c1, alph.simp)
source("breakSubCypher.R")
writeResult(res, c1, alph.simp)
res$data
inverseSubCipher(cipher)
inverseSubCipher(res$data[[10]])
cipher
P.log
res = breakCipher(c1, beta.simp, P.log.simp, alph.simp, 1000)
dim(P.log.simp)
length(beta.simp)
length(alph.simp)
alph.simp
source("breakSubCypher.R")
P.log.simp = getP.log(lotw.simp, alph.simp)
P.log.simp = getP.log(lotw.simp.num, alph.simp)
beta.simp = getBeta(lotw.simp.num, alph.simp)
res = breakCipher(c1, beta.simp, P.log.simp, alph.simp, 1000)
length(cipher)
length(alph.simp)
writeResult(res, c1, alph.simp)
P.log.simp = getP.log(lotw.simp.num, alph.simp)
res = breakCipher(c1, beta.simp, P.log.simp, alph.simp, 1000)
writeResult(res, c1, alph.simp)
plaintext.num
extractAIC
plaintext
c1
plaintext
p1
cipher = createSubCiph(length(alph.simp))
p1.num
cipher
length(cipher)
length(alph.simp)
c1 = applycipher.num(cipher, p1)
c1
c1 = applycipher.num(cipher, p1.num)
c1
p1
c1
res = breakCipher(c1, beta.simp, P.log.simp, alph.simp, 1000)
writeResult(res, c1, alph.simp)
P.log.simp
P.log.simp[,36]
0/0
source("breakSubCypher.R")
P.log.simp = getP.log(lotw.simp.num, alph.simp)
a = matrix(1:9, ncol=3)
colSum(a)
a
sumCol(a)
rowSums(a)
a/rowSums(a)
?apply
source("breakSubCypher.R); P.log.simp = getP.log(lotw.simp.num, alph.simp)
source("breakSubCypher.R); P.log.simp = getP.log(lotw.simp.num, alph.simp);
source("breakSubCypher.R)
source("breakSubCypher.R"); P.log.simp = getP.log(lotw.simp.num, alph.simp)
P.log.simp
res = breakCipher(c1, beta.simp, P.log.simp, alph.simp, 1000)
writeResult(res, c1, alph.simp)
a
apply(a, 1, function(x) { return(sumx)})
apply(a, 1, function(x) { return(sum(x))})
rowSums(a)
source("breakSubCypher.R")
res = breakCipher(c1, beta.simp, P.log.simp, alph.simp, 1000)
res
inverseSubCipher(cipher)
P.log.simp[0,36]
source("breakSubCypher.R")
P.log.simp = getP.log(lotw.simp.num, alph.simp)
P.log.simp
P.log = getP.log(book.num = lotw.num, alphabet=lotwfullalph)
beta = getBeta(message.num=lotw.num, alphabet=lotwfullalph)
plaintext
source("breakSubCypher.R")
lotw
lotw.num
beta = getBeta(message.num=lotw.num, alphabet=lotwfullalph)
source("breakSubCypher.R")
beta = getBeta(message.num=lotw.num, alphabet=lotwfullalph)
source("breakSubCypher.R")
source("breakSubCypher.R")
beta = getBeta(message.num=lotw.num, alphabet=lotwfullalph)
length(lotwfullalph)
beta = getBeta(message.num=lotw.num, alphabet=lotwfullalph)
source("breakSubCypher.R")
beta = getBeta(message.num=lotw.num, alphabet=lotwfullalph)
book
lotw.num = convertMessageToNumeric(book, lotwfullalph)
beta = getBeta(message.num=lotw.num, alphabet=lotwfullalph)
lotwfullalph
beta
P.log = getP.log(lotw.num, lotwfullalph)
P.log
lotwfullalph[20]
source("breakSubCypher.R")
ls
P.log = getP.log(lotw.num, lotwfullalph)
book.war = readLines("../../ciphers/resources/warandpeace.txt")
book.war
book.war = paste(book.war, collapse = '')
book.war
war.num = convertMessageToNumeric(war.num, lotwfullalph)
war.num = convertMessageToNumeric(book.war, lotwfullalph)
war.num[1:100]
P.log = getP.log(war.num, lotwfullalph)
P.log
P.log ==0

P.log
alph[53]
lotwfullalph[53]
lotwfullalph[63]
source("breakSubCypher.R")
P.log[53,]
source("breakSubCypher.R")
P.log = getP.log(war.num, lotwfullalph)
P.log
P.log[53]
P.log[53,]
P.log[,63]
lotwfullalph[63,]
P.log[63,]
beta = getBeta(war.num, lotwfullalph)
source("breakSubCypher.R")
beta = getBeta(war.num, lotwfullalph)
source("breakSubCypher.R")
beta = getBeta(war.num, lotwfullalph)
source("breakSubCypher.R")
war.num = convertMessageToNumeric(book.war, lotwfullalph)
beta = getBeta(war.num, lotwfullalph)
source("breakSubCypher.R")
lotwfullalph
war.num = convertMessageToNumeric(book.war, lotwfullalph)
beta = getBeta(war.num, lotwfullalph)
P.log = getP.log(war.num, lotwfullalph)
P.log
lotwfullalph
cipher = createSubCiph(length(lotwfullalph))
cipher
p1
plaintext
plaintext.num
p1.num
plaintext
p2 = strsplit(plaintext, '')[[1]]
p2
p2.num = convertMessageToNumeric(p2, lotwfullalph)
p2.num
c2 = applycipher.num(cipher, p2.num)
c2
breakCipher(c2, beta, P.log, lotwfullalph, 1000)
res = breakCipher(c2, beta, P.log, lotwfullalph, 1000)
writeResult(res, c2, lotwfullalph)
res = breakCipher(c2, beta, P.log, lotwfullalph, 10000)
writeResult(res, c2, lotwfullalph)
inverseSubC(cipher)
inverseSubCipher(cipher)
unique(book.war)
unique(war.num)
sort(unique(war.num))
length(lotwfullalph)
beta
q()
