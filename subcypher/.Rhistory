P.log
source("breakSubCypher.R")
res = breakCypher(cyphertext.num, beta, P.log, lotwfullalph, 100)
source("breakSubCypher.R")
res = breakCypher(cyphertext.num, beta, P.log, lotwfullalph, 100)
source("breakSubCypher.R")
res = breakCypher(cyphertext.num, beta, P.log, lotwfullalph, 100)
res
source("breakSubCypher.R")
res = breakCypher(cyphertext.num, beta, P.log, lotwfullalph, 100)
source("breakSubCypher.R")
res = breakCypher(cyphertext.num, beta, P.log, lotwfullalph, 20)
res = breakCypher(cyphertext.num, beta, P.log, lotwfullalph, 20)
source("breakSubCypher.R")
res = breakCypher(cyphertext.num, beta, P.log, lotwfullalph, 20)
res
res = breakCypher(cyphertext.num, beta, P.log, lotwfullalph, 1000)
res
cypher
inverseSubCyper(cypher)
res = breakCypher(cyphertext.num, beta, P.log, lotwfullalph, 10000)
res
res$data
res$data[[1]]
inverseSubCyper(cypher)
res = breakCypher(cyphertext.num, beta, P.log, lotwfullalph, 100000)
res$data$[[1]]
res$data[[1]]
unencrypted = applycyphernum(res$data[[1]], cyphertext.num)
unencrypted
convertNumericToMessage(unencrypted, lotwfullalph)
res = breakCypher(cyphertext.num, beta, P.log, lotwfullalph, 100000)
res
res[[10]]
res$data[[10]]
convertNumericToMessage(applycyphernum(res$data[[10]],cyphertext.num ), lotwfullalph)
plaintext
convertNumericToMessage(applycyphernum(inverseSubCyper(cypher),cyphertext.num ), lotwfullalph)
inverseSubCyper(cypher)
res$data[[1]]
res = breakCypher(cyphertext.num, beta, P.log, lotwfullalph, 100000)
convertNumericToMessage(applycyphernum(res$data[[10]],cyphertext.num ), lotwfullalph)
convertNumericToMessage(applycyphernum(res$data[[1]],cyphertext.num ), lotwfullalph)
ls()
q()
convertNumericToMessage(applycyphernum(res$data[[1]],cyphertext.num ), lotwfullalph)
res = breakCypher(cyphertext.num, beta, P.log, lotwfullalph, 100000)
res$data
res = breakCypher(cyphertext.num, beta, P.log, lotwfullalph, 100000)
res
source("breakSubCypher.R")
res = breakCypher(cyphertext.num, beta, P.log, lotwfullalph, 100000)
res = breakCypher(cyphertext.num, beta, P.log, lotwfullalph, 100000)
source("breakSubCypher.R")
res = breakCypher(cyphertext.num, beta, P.log, lotwfullalph, 100000)
res$data
res
convertNumericToMessage(applycyphernum(res$data[[1]],cyphertext.num ), lotwfullalph)
convertNumericToMessage(applycyphernum(res$data[[10]],cyphertext.num ), lotwfullalph)
convertNumericToMessage(applycyphernum(inverseSubCyper(cypher),cyphertext.num ), lotwfullalph)
inverseSubCyper(cypher)
res$data[[1]]
res$data[[10]]
source("breakSubCypher.R")
res = breakCypher(cyphertext.num, beta, P.log, lotwfullalph, 10000)
source("breakSubCypher.R")
res = breakCypher(cyphertext.num, beta, P.log, lotwfullalph, 10000)
res = breakCypher(cyphertext.num, beta, P.log, lotwfullalph, 10000)
source("breakSubCypher.R")
res = breakCypher(cyphertext.num, beta, P.log, lotwfullalph, 10000)
res$data
inverseSubCyper(cypher)
cypher
convertNumericToMessage(applycyphernum(inverseSubCyper(data[[10]]),cyphertext.num ), lotwfullalph)
convertNumericToMessage(applycyphernum(inverseSubCyper(res$data[[10]]),cyphertext.num ), lotwfullalph)
res$priorities
convertNumericToMessage(applycyphernum(inverseSubCyper(res$data[[10]]),cyphertext.num ), lotwfullalph)
res$priorities
source("breakSubCypher.R")
res = breakCypher(cyphertext.num, beta, P.log, lotwfullalph, 10000)
convertNumericToMessage(applycyphernum(inverseSubCyper(res$data[[10]]),cyphertext.num ), lotwfullalph)
convertNumericToMessage(applycyphernum(res$data[[10]],cyphertext.num ), lotwfullalph)
pq
res
source("breakSubCypher.R")
res = breakCypher(cyphertext.num, beta, P.log, lotwfullalph, 10000)
source("breakSubCypher.R")
res = breakCypher(cyphertext.num, beta, P.log, lotwfullalph, 10000)
source("breakSubCypher.R")
res = breakCypher(cyphertext.num, beta, P.log, lotwfullalph, 100000)
source("breakSubCypher.R")
res = breakCypher(cyphertext.num, beta, P.log, lotwfullalph, 100000)
P.log
source("breakSubCypher.R")
res = breakCypher(cyphertext.num, beta, P.log, lotwfullalph, 100000)
res = breakCypher(cyphertext.num, beta, P.log, lotwfullalph, 10000)le
res$priorities
source("breakSubCypher.R")
length(lotwfullalph)
cipher = createSubCyph(length(lotwfullalph))
cipher
ciphertext.number = applycypher(cipher, plaintext.num)
ciphertext.number = applycyphernum(cipher, plaintext.num)
ciphertext.number
plaintext.num
plaintext.num[1:10]
ciphertext.number[1:10]
cypher[18]
cypher[46]
cipher[18]
cipher[46]
res = breakCypher(ciphertext.number, alphabet=lotwfullalph, 1000)
res
source("breakSubCypher.R")
res = breakCypher(ciphertext.number, alphabet=lotwfullalph, 1000)
res = breakCypher(ciphertext.number, alphabet=lotwfullalph, 10000)
source("breakSubCypher.R")
res = breakCypher(ciphertext.number, alphabet=lotwfullalph, 10000)
res = breakCypher(ciphertext.number, beta, P.log, lotwfullalph, 10000)
res
cipher
q()
res = breakCypher(ciphertext.number, beta, P.log, lotwfullalph, 10000)
q()
source("breakSubCypher.R")
res = breakCypher(ciphertext.number, beta, P.log, lotwfullalph, 10000)
source("breakSubCypher.R")
res = breakCypher(ciphertext.number, beta, P.log, lotwfullalph, 10000)
res = breakCipher(ciphertext.number, beta, P.log, lotwfullalph, 10000)
rm(breakCypher)
source("breakSubCypher.R")
res = breakCipher(ciphertext.number, beta, P.log, lotwfullalph, 10000)
res = breakCipher(ciphertext.number, beta, P.log, lotwfullalph, 1000)
res
res = breakCipher(ciphertext.number, beta, P.log, lotwfullalph, 10000)
res
res = breakCipher(ciphertext.number, beta, P.log, lotwfullalph, 10000)
res
source("breakSubCypher.R")
res = breakCipher(ciphertext.number, beta, P.log, lotwfullalph, 10000)
source("breakSubCypher.R")
res = breakCipher(ciphertext.number, beta, P.log, lotwfullalph, 10000)
ciphertext.number
lotwfullalph[18]
lotwfullalph[1:10]
plaintext[1:10]
plaintext[1:10]
plaintext.num
plaintext.num[1:10]
getFrequencies(1:26,lotwfullalph)
getFrequenciesNum(1:26, lotwfullalph)
getFrequenciesNum(1:26, letters)
getFrequenciesNum(26:1, letters)
ls()
book
book.simp = readLines("../books/LoveOfTheWildSimp.txt")
book.simp
ls()
wholebook
wholebook.simp = paste(book.simp, collapse = '')
wholebook.simp
book.num = convertMessageToNumeric(wholebook.simp, alph.simp)
source("breakSubCypher.R")
source("breakSubCypher.R")
book.num = convertMessageToNumeric(wholebook.simp, alph.simp)
book.num
book.num[1:10]
book.num[1:20]
tolower("BOB2")
wholebook.simp = tolower(wholebook.simp)
wholebook
wholebook.simp
book.num = convertMessageToNumeric(wholebook.simp, alph.simp)
book.num[1:30]
length(alph.simp)
getP.log(book.num, alph.simp)
getBeta(book.num, alph.simp)
beta = getBeta(book.num, alph.simp)
P.log = getP.log(book.num, alph.simp)
plaintext
source("breakSubCypher.R")
P.log = getP.log(book.num, alph.simp)
beta = getBeta(book.num, alph.simp)
beta
P.log
book.num
source("breakSubCypher.R")
alph.simp
book.num = convertMessageToNumeric(wholebook.simp, alph.simp)
mapply(function(x) { return(is.nan(x) }, book.num)
mapply(function(x) { return(is.nan(x)) }, book.num)
AND
and
is.nan(NaN)
mapply(function(x) { return(is.na(x)) }, book.num)
all(mapply(function(x) { return(is.na(x)) }, book.num))
all(mapply(function(x) { ! return(is.na(x)) }, book.num))
book.simp
wholebook.simp
strsplit(wholebook.simp, '')
let s = strsplit(wholebook.simp, '')
s = strsplit(wholebook.simp, '')
for ( i in 1:length(s)) {
if(is.na(match(s[i], alph.simp))) { print("missing:"); print(s[i]) } }
s
for ( i in 1:length(s)) {
if(is.na(match(s[i], alph.simp))) { print("missing:"); print(s[i]) } }
if(is.na(match(s[i], alph.simp))) { print("missing:") } }
if(is.na(match(s[i], alph.simp))) { print("missing:") }
if(is.na(match(s[i], alph.simp))) { print("missing:"); print(s[i] }
if(is.na(match(s[i], alph.simp))) { print("missing:"); print(s[i]) }
length(s)
length(s[[1]])
for ( i in 1:length(s)[[1]]) {
if(is.na(match(s[i], alph.simp))) { print("missing:"); print(s[i]) } }
s[1]
for(i in 1: length(s[[1]]) ) { if(is.na(match(s[[1]][i], alph.simp))) { print("missing:"); print(s[[1]][i]) } }
alph.simp = c(alph.simp, ";")
for(i in 1: length(s[[1]]) ) { if(is.na(match(s[[1]][i], alph.simp))) { print("missing:"); print(s[[1]][i]) } }
book.num = convertMessageToNumeric(wholebook.simp, alph.simp)
getP.log(book.num, alph.simp)
P.log = getP.log(book.num, alph.simp)
getBeta(book.num, alph.simp)
source("breakSubCypher.R")
source("breakSubCypher.R")
getBeta(book.num, alph.simp)
source("breakSubCypher.R")
getBeta(book.num, alph.simp)
beta = getBeta(book.num, alph.simp)
cypher = createSubCyph(length(alph.simp))
cypher
plaintext
plaintext = "The need to protect secrets via encryption has existed for millennia, and for just
as long the desire to intercept and decode such secrets has been its counterpart.
Traditionally, cryptanalysis has been a tedious, manual process, but with recent
advances in computing, new methods are being developed that require little human input. This dissertation will develop and assess such a method, known as
Markov chain Monte Carlo, in its ability to decode classical ciphers. A new implementation for transposition ciphers is proposed, and is found to outperform
the existing algorithm by all accounts. The final class of ciphers considered is
polyalphabetic ciphers, a mostly unexplored area for this type of algorithm."
strplaintext
plaintext = "The need to protect secrets via encryption has existed for millennia, and for just as long the desire to intercept and decode such secrets has been its counterpart. Traditionally, cryptanalysis has been a tedious, manual process, but with recent advances in computing, new methods are being developed that require little human input. This dissertation will develop and assess such a method, known as Markov chain Monte Carlo, in its ability to decode classical ciphers. A new implementation for transposition ciphers is proposed, and is found to outperform the existing algorithm by all accounts. The final class of ciphers considered is polyalphabetic ciphers, a mostly unexplored area for this type of algorithm."
plaintext
plaintext.num = convertMessageToNumeric(plaintext, alph.simp)
plaintext.num
plaintext = tolower(plaintext)
plaintext
plaintext.num = convertMessageToNumeric(plaintext, alph.simp)
plaintext.num
clear
plaintext.num
cyphertext.num
plaintext.num
cypher
source("makeSubCyper.R")
source("makeSubCyper.R")
cyphertext.num = applycipher.num(cipher, plaintext.num)
source("makeSubCyper.R")
cyphertext.num = applycipher.num(cipher, plaintext.num)
cyphertext.num
convertNumericToMessage(cyphertext.num, alph.simp)
convertNumericToMessage(ciphertext.num, alph.simp)
convertNumericToMessage(ciphertext.number, alph.simp)
clear
ciphertext.number
cyphertext.num = applycipher.num(cipher, plaintext.num)
ciphertext.num = applycipher.num(cipher, plaintext.num)
ciphertext.num
plaintext.num
cipher
cypher
cipher = cypher
cipher
ciphertext.num = applycipher.num(cipher, plaintext.num)
ciphertext.num
convertNumericToMessage(ciphertext.number, alph.simp)
ciphertext.num
convertNumericToMessage(ciphertext.number, alph.simp)
convertNumericToMessage(ciphertext.num, alph.simp)
cipher
breakCipher(ciphertext.num, beta, P.log, 1000)
ciphertext.num
ciphertext.number
rm(ciphertext.number)
clear
breakCipher(ciphertext.num, beta, P.log, 1000)
source("breakSubCypher.R")
breakCipher(ciphertext.num, beta, P.log, 1000)
breakCipher(ciphertext.num, beta, P.log,alph.simp, 1000)
inverseSubCyper(cypher)
res = breakCipher(ciphertext.num, beta, P.log,alph.simp, 1000)
res = breakCipher(ciphertext.num, beta, P.log, alph.simp, 1000)
source("breakSubCypher.R")
res = breakCipher(ciphertext.num, beta, P.log, alph.simp, 1000)
res
res[10]
res[[10]]
res
res$data[10]
applycipher.num(cipher = res$data[10], plaintext.num = ciphertext.num)
applycipher.num(cipher = res$data[10], plaintext.num = ciphertext.num)
applycipher.num(res$data[10], ciphertext.num)
source("makeSubCyper.R")
applycipher.num(res$data[10], ciphertext.num)
applycipher.num(, ciphertext.num)
cipher
res$data[10]
applycipher.num(res$data[10][[1]], ciphertext.num)
convertNumericToMessage(applycipher.num(res$data[10][[1]], ciphertext.num), alph.simp)
res = breakCipher(ciphertext.num, beta, P.log, alph.simp, 10000)
res$data
inverseSubCipher(cipher)
cipher
convertNumericToMessage(applycipher.num(res$data[[10]], ciphertext.num), alph.simp)
ciphertext.num
convertNumericToMessage(ciphertext.num, alph.simp)
alph.simp
applycipher.num([1:26], [1:26]
applycipher.num([1:26], [1:26])
applycipher.num([1:26], [1:26])
applycipher.num( [1:26], [1:26])
applycipher.num(cipher=[1:26], plaintext.num=[1:26)
applycipher.num(1:26, 1:26)
applycipher.num(26:1, 1:26)
applycipher.num(c(26, 1:25), 1:26)
cipher = c(26, 1:25)
ciphertext.num = applycipher.num(c(26, 1:25), plaintext.num)
ciphertext.num
length(alph.simp)
ciphertext.num = applycipher.num(c(26, 1:25,27:35 ), plaintext.num)
ciphertext.num
sample(1:10)
sample(1:10,1)
sample(1:10,3)
sample(1:10,1)
seed(1)
set.seed(1)
sample(1:10,1)
sample(1:10,1)
sample(1:10,1)
sample(1:10,1)
set.seed(1)
sample(1:10,1)
sample(1:10,1)
sample(1:10,1)
barplot(beta)
barplot(alph.simp, beta)
barplot(beta, alph.simp)
zip
barplot(beta, names.arc=alph.simp)
barplot(beta, names.arg=alph.simp)
barplot(exp(beta), names.arg=alph.simp)
barplot(exp(P.log[,1]), names.arg=alph.simp)
barplot(exp(P.log[,27]), names.arg=alph.simp)
barplot(exp(P.log[27,]), names.arg=alph.simp)
ls()
a
a[1:40]
a[[1]][1:40]
rm(a)
length(alph.simp)
cipher = c(26, 2:25, 27:35)
cipher
cipher = c(26, 2:25,1, 27:35)
cipher = c(26, 2:25,1, 27:35)
cipher
length(cipher)
ciphertext.num = applycipher.num(cipher, plaintext.num)
ciphertext.num
ciphertext.num[1:20]
plaintext.num[1:20]
plaintext.num[21:40]
ciphertext.num[21:41]
breakCipher(ciphertext.num = ciphertext.num, beta = beta, P = P.log, alphabet= alph.simp, M = 1000)
cipher
breakCipher(ciphertext.num = ciphertext.num, beta = beta, P = P.log, alphabet= alph.simp, M = 10000)
cipher
P.log
plaintext
ls
ls()
book.num
book.num[1:30]
cipher
ciphertext.num
plaintext.num
ciphertext.num
length(plaintext.num)
ciphertext.num[1:40]
plaintext.num[1:40]
res = breakCipher(ciphertext.num, beta,P.log, alph.simp, M = 1000)
res
inverseSubCipher(cipher)
plaintext
convertNumericToMessage(applycipher.num(res$data[[10]], ciphertext.num) alph.simp)
convertNumericToMessage(applycipher.num(res$data[[10]], ciphertext.num), alph.simp)
paste(convertNumericToMessage(applycipher.num(res$data[[10]], ciphertext.num), alph.simp), collapse = '')
paste(convertNumericToMessage(applycipher.num(res$data[[10]], ciphertext.num), alph.simp), collision = '')
paste(convertNumericToMessage(applycipher.num(res$data[[10]], ciphertext.num), alph.simp), collapse = '')
paste(convertNumericToMessage(applycipher.num(res$data[[9]], ciphertext.num), alph.simp), collapse = '')
paste(convertNumericToMessage(applycipher.num(res$data[[8]], ciphertext.num), alph.simp), collapse = '')
plaintext
res = breakCipher(ciphertext.num, beta,P.log, alph.simp, M = 10000)
paste(convertNumericToMessage(applycipher.num(res$data[[10]], ciphertext.num), alph.simp), collapse = '')
paste(convertNumericToMessage(applycipher.num(res$data[[9]], ciphertext.num), alph.simp), collapse = '')
paste(convertNumericToMessage(applycipher.num(res$data[[1]], ciphertext.num), alph.simp), collapse = '')
plaintext
book
book.num

ls()
booknumvec
length(booknumvec)
P.log = getP.log(booknumvec, lotwfullalph)
P.log
plaintext
plaintext = paste(readLines("../../ciphers/resources/extract.txt"), collapse = '')
plaintext
length(plaintext)
length(plaintext)
book = paste(readLines("../books/LoveOfTheWildFull.txt"), collapse = '')
bok
book
book.num = convertMessageToNumeric(length(strsplit(book, '')[[1]]), fullalp
source("breakSubCypher.R")
source("makeSubCyper.R")
source("makeSubCyper.R")
book.num = convertMessageToNumeric(length(strsplit(book, '')[[1]]), fullalph)
book.num = convertMessageToNumeric(length(strsplit(book, '')[[1]]), lotwfullalph)
book.num = convertMessageToNumeric(strsplit(book, '')[[1]]), lotwfullalph)
book.num = convertMessageToNumeric(strsplit(book, '')[[1]], lotwfullalph)
book.num[1:40]
book[1:40]
book
P.log = getP.log(book.num, lotwfullalph)
booknumvec
book.num
book.num  == booknumvec
all(book.num  == booknumvec)
P.log = getP.log(book.num, lotwfullalph)
source("breakSubCypher.R")
P.log = getP.log(book.num, lotwfullalph)
source("breakSubCypher.R")
P.log = getP.log(book.num, lotwfullalph)
book.num[2]l
is.na(book.num)
all(is.na(book.num))
all(! is.na(book.num))
lotwfullalph
source("makeSubCyper.R")
lotwfullalph
P.log = getP.log(book.num, lotwfullalph)
source("breakSubCypher.R")
source("breakSubCypher.R")
P.log = getP.log(book.num, lotwfullalph)
source("breakSubCypher.R")
P.log = getP.log(book.num, lotwfullalph)
a = matrix( 1:4, ncol = 2)
a
apply?
?apply
apply(a, 2, function(x) { print(x)})
source("breakSubCypher.R")
P.log = getP.log(book.num, lotwfullalph)
source("breakSubCypher.R")
P.log = getP.log(book.num, lotwfullalph)
source("breakSubCypher.R")
source("breakSubCypher.R")
P.log = getP.log(book.num, lotwfullalph)
source("breakSubCypher.R")
P.log = getP.log(book.num, lotwfullalph)
source("breakSubCypher.R")
P.log = getP.log(book.num, lotwfullalph)
?apply
source("breakSubCypher.R")
P.log = getP.log(book.num, lotwfullalph)
source("breakSubCypher.R")
P.log = getP.log(book.num, lotwfullalph)
source("breakSubCypher.R")
P.log = getP.log(book.num, lotwfullalph)
source("breakSubCypher.R")
P.log = getP.log(book.num, lotwfullalph)
P.log
P.log[1:20, 1:20]
getBeta(book.num, lotwfullalph)
lotwfullalph
cipher = createSubCiph(length(lotwfullalph))
cipher
plaintext
plaintext.num
ciphertext.num = applycipher.num(plaintext.num, lotwfullalph)
ciphertext.num
ciphertext.num = applycipher.num(plaintext.num, lotwfullalph)
ciphertext.num
ciphertext.num = applycipher.num(lotwfullalph, plaintext.num)
ciphertext.num
cipher
cipher = createSubCiph(length(lotwfullalph))
ciphertext.num = applycipher.num(cipher, plaintext.num)
ciphertext.num
breakCipher(ciphertext.num, beta = beta, P = P.log, alphabet= lotwfullalph, M =1000)
convertNumericToMessage(applycipher.num(res$data[[10]], ciphertext.num), lotwfullalph)
res = breakCipher(ciphertext.num, beta = beta, P = P.log, alphabet= lotwfullalph, M =1000)
convertNumericToMessage(applycipher.num(res$data[[10]], ciphertext.num), lotwfullalph)
ciphertext.num
convertNumericToMessage(applycipher.num(res$data[[10]], ciphertext.num, lotwfullalph), lotwfullalph)
convertNumericToMessage(applycipher.num(res$data[[10]], ciphertext.num), lotwfullalph)
res = breakCipher(ciphertext.num, beta = beta, P = P.log, alphabet= lotwfullalph, M =10000)
inverseSubCipher(cipher)
res$data[[10]]
P.log
P.log[P.log == 0]
q()
