writeResult(res, c1, alph.simp)
plaintext.num
extractAIC
plaintext
c1
plaintext
p1
cipher = createSubCiph(length(alph.simp))
p1.num
cipher
length(cipher)
length(alph.simp)
c1 = applycipher.num(cipher, p1)
c1
c1 = applycipher.num(cipher, p1.num)
c1
p1
c1
res = breakCipher(c1, beta.simp, P.log.simp, alph.simp, 1000)
writeResult(res, c1, alph.simp)
P.log.simp
P.log.simp[,36]
0/0
source("breakSubCypher.R")
P.log.simp = getP.log(lotw.simp.num, alph.simp)
a = matrix(1:9, ncol=3)
colSum(a)
a
sumCol(a)
rowSums(a)
a/rowSums(a)
?apply
source("breakSubCypher.R); P.log.simp = getP.log(lotw.simp.num, alph.simp)
source("breakSubCypher.R); P.log.simp = getP.log(lotw.simp.num, alph.simp);
source("breakSubCypher.R)
source("breakSubCypher.R"); P.log.simp = getP.log(lotw.simp.num, alph.simp)
P.log.simp
res = breakCipher(c1, beta.simp, P.log.simp, alph.simp, 1000)
writeResult(res, c1, alph.simp)
a
apply(a, 1, function(x) { return(sumx)})
apply(a, 1, function(x) { return(sum(x))})
rowSums(a)
source("breakSubCypher.R")
res = breakCipher(c1, beta.simp, P.log.simp, alph.simp, 1000)
res
inverseSubCipher(cipher)
P.log.simp[0,36]
source("breakSubCypher.R")
P.log.simp = getP.log(lotw.simp.num, alph.simp)
P.log.simp
P.log = getP.log(book.num = lotw.num, alphabet=lotwfullalph)
beta = getBeta(message.num=lotw.num, alphabet=lotwfullalph)
plaintext
source("breakSubCypher.R")
lotw
lotw.num
beta = getBeta(message.num=lotw.num, alphabet=lotwfullalph)
source("breakSubCypher.R")
beta = getBeta(message.num=lotw.num, alphabet=lotwfullalph)
source("breakSubCypher.R")
source("breakSubCypher.R")
beta = getBeta(message.num=lotw.num, alphabet=lotwfullalph)
length(lotwfullalph)
beta = getBeta(message.num=lotw.num, alphabet=lotwfullalph)
source("breakSubCypher.R")
beta = getBeta(message.num=lotw.num, alphabet=lotwfullalph)
book
lotw.num = convertMessageToNumeric(book, lotwfullalph)
beta = getBeta(message.num=lotw.num, alphabet=lotwfullalph)
lotwfullalph
beta
P.log = getP.log(lotw.num, lotwfullalph)
P.log
lotwfullalph[20]
source("breakSubCypher.R")
ls
P.log = getP.log(lotw.num, lotwfullalph)
book.war = readLines("../../ciphers/resources/warandpeace.txt")
book.war
book.war = paste(book.war, collapse = '')
book.war
war.num = convertMessageToNumeric(war.num, lotwfullalph)
war.num = convertMessageToNumeric(book.war, lotwfullalph)
war.num[1:100]
P.log = getP.log(war.num, lotwfullalph)
P.log
P.log ==0
P.log
alph[53]
lotwfullalph[53]
lotwfullalph[63]
source("breakSubCypher.R")
P.log[53,]
source("breakSubCypher.R")
P.log = getP.log(war.num, lotwfullalph)
P.log
P.log[53]
P.log[53,]
P.log[,63]
lotwfullalph[63,]
P.log[63,]
beta = getBeta(war.num, lotwfullalph)
source("breakSubCypher.R")
beta = getBeta(war.num, lotwfullalph)
source("breakSubCypher.R")
beta = getBeta(war.num, lotwfullalph)
source("breakSubCypher.R")
war.num = convertMessageToNumeric(book.war, lotwfullalph)
beta = getBeta(war.num, lotwfullalph)
source("breakSubCypher.R")
lotwfullalph
war.num = convertMessageToNumeric(book.war, lotwfullalph)
beta = getBeta(war.num, lotwfullalph)
P.log = getP.log(war.num, lotwfullalph)
P.log
lotwfullalph
cipher = createSubCiph(length(lotwfullalph))
cipher
p1
plaintext
plaintext.num
p1.num
plaintext
p2 = strsplit(plaintext, '')[[1]]
p2
p2.num = convertMessageToNumeric(p2, lotwfullalph)
p2.num
c2 = applycipher.num(cipher, p2.num)
c2
breakCipher(c2, beta, P.log, lotwfullalph, 1000)
res = breakCipher(c2, beta, P.log, lotwfullalph, 1000)
writeResult(res, c2, lotwfullalph)
res = breakCipher(c2, beta, P.log, lotwfullalph, 10000)
writeResult(res, c2, lotwfullalph)
inverseSubC(cipher)
inverseSubCipher(cipher)
unique(book.war)
unique(war.num)
sort(unique(war.num))
length(lotwfullalph)
beta
q()
source("breakSubCypher.R")
P.log = getP.log(war.num, lotwfullalph)
P.log
P.log[ P.log > 1]
book
source("breakSubCypher.R")
source("breakSubCypher.R")
source("breakSubCypher.R")
source("makeSubCyper.R")
source("makeSubCyper.R")
book = paste(readLines("../books/LoveOfTheWildFull.txt"), collapse = "\n")
book
strsplit(book, '')
strsplit(book, '')[[1]][1:40]
strsplit(book, '')[[1]][1:100]
strsplit(book, '')[[1]][1:1000]
lotw.num = convertMessageToNumeric(strsplit(book, '')[[1]], lotwfullalph)
lotwfullalph
P.log = getP.log(lotw.num, lotwfullalph)
P.log
source("breakSubCypher.R")
source("makeSubCyper.R")
lotwfullalph
lotw.num = convertMessageToNumeric(strsplit(book, '')[[1]], lotwfullalph)
P.log = getP.log(lotw.num, lotwfullalph)
lotw.num[1:100]
getP.log(lotw.num, lotwfullalph)
lotwfullalph
source("breakSubCypher.R")
getP.log(lotw.num, lotwfullalph)
lotwfullalph
source("breakSubCypher.R")
getP.log(lotw.num, lotwfullalph)
book
source("breakSubCypher.R")
source("breakSubCypher.R")
P.log2 = getP.log.frombook("../books/LoveOfTheWildFull.txt", lotwfullalph)
P.log2 = getP.log.frombook("../books/LoveOfTheWildFull.txt", lotwfullalph)
source("breakSubCypher.R")
P.log2 = getP.log.frombook("../books/LoveOfTheWildFull.txt", lotwfullalph)
source("breakSubCypher.R")
P.log2 = getP.log.frombook("../books/LoveOfTheWildFull.txt", lotwfullalph)
P.log2["X",] = rep(-12
source("breakSubCypher.R")
P.log2 = getP.log.frombook("../books/LoveOfTheWildFull.txt", lotwfullalph)
P.log2
P.log2 = getP.log.frombook("../books/LoveOfTheWildFull.txt", lotwfullalph)
source("breakSubCypher.R")
P.log2 = getP.log.frombook("../books/LoveOfTheWildFull.txt", lotwfullalph)
P.log2j
source("breakSubCypher.R")
P.log2 = getP.log.frombook("../books/LoveOfTheWildFull.txt", lotwfullalph)
P.log2
P.log2["L",]
source("breakSubCypher.R")
P.log2 = getP.log.frombook("../books/LoveOfTheWildFull.txt", lotwfullalph)
P.log2["L",]
P.log2["X",]
log(NaN)
source("breakSubCypher.R")
P.log2 = getP.log.frombook("../books/LoveOfTheWildFull.txt", lotwfullalph)
P.log2
P.log2[P.log2==-Inf]
P.log2[P.log2==-Inf] = -12
P.log2
source("breakSubCypher.R")
P.log2 = getP.log.frombook("../books/LoveOfTheWildFull.txt", lotwfullalph)
P.log2
NaN= NaN
NaN== NaN
P.log2["X",] = rep(64, -12)
P.log2["X",] = rep(-1,642)
P.log2["X",] = rep(-1,64)
P.log2["X",]
P.log2["X",] = rep(-12,64)
P.log2["X",]
P.log2
source("breakSubCypher.R")
beta2 = getB.log.frombook("../books/LoveOfTheWildFull.txt", lotwfullalph)
source("breakSubCypher.R")
beta2 = getB.log.frombook("../books/LoveOfTheWildFull.txt", lotwfullalph)
beta
beta2
length(lotwfullalph)
cipher = createSubCiph(64)
cipher
plaintext
plaintext = paste(readLines("../../ciphers/resources/extract.txt"), "\n")
plaintext
plaintext = paste(readLines("../../ciphers/resources/extract.txt"), collapse="\n")
plaintext
plaintext = paste(readLines("../../ciphers/resources/extract.txt"), collapse="\n")
plaintext
p3 = convertMessageToNumeric(plaintext, lotwfullalph)
p3
c3 = applycipher.num(cipher, p3)
c3
cipher
length(cipher)
breakCipher(c3, beta2, P.log2, lotwfullalph, 1000)
res = breakCipher(c3, beta2, P.log2, lotwfullalph, 1000)
writeResult(res, c3, lotwfullalph)
res$data
res = breakCipher(c3, beta2, P.log2, lotwfullalph, 10000)
writeResult(res, c3, lotwfullalph)
res
res = breakCipher(c3, beta2, P.log2, lotwfullalph, 1000)
res
writeResult(res, c3, lotwfullalph)
source("breakSubCypher.R")
res = breakCipher(c3, beta2, P.log2, lotwfullalph, 1000)
source("breakSubCypher.R")
res = breakCipher(c3, beta2, P.log2, lotwfullalph, 1000)
res$data
writeResult(res, c3, lotwfullalph)
lapply
lapply(res$data, function(x) { return(inverseSubCipher(x))})
res$data = lapply(res$data, function(x) { return(inverseSubCipher(x))})
writeResult(res, c3, lotwfullalph)
res$data = lapply(res$data, function(x) { return(inverseSubCipher(x))})
res = breakCipher(c3, beta2, P.log2, lotwfullalph, 1000)
res
res
ciphr
cipher
inverseSubCipher(cipher)
source("breakSubCypher.R")
source("makeSubCyper.R")
res = breakCipher(c3, beta2, P.log2, lotwfullalph, 1000)
res
res = breakCipher(c3, beta2, P.log2, lotwfullalph, 10000)
res
P.log2
beta2
c3
source("breakSubCypher.R")
res = breakCipher(c3, beta2, P.log2, lotwfullalph, 10000)
c3[1]
source("breakSubCypher.R")
res = breakCipher(c3, beta2, P.log2, lotwfullalph, 1000)
source("breakSubCypher.R")
res = breakCipher(c3, beta2, P.log2, lotwfullalph, 1000)
res$data
cipher
inverseSubCipher(cipher)
source("breakSubCypher.R")
res = breakCipher(c3, beta2, P.log2, lotwfullalph, 1000)
p3
res$data
res = breakCipher(c3, beta2, P.log2, lotwfullalph, 100000)
res$data
cipher
inverseSubCipher(cipher)
clear
clear
p3
ciher
cipher
lotwfullalph=
lotwfullalph
p3
c3
ciper
cipher
applycipher.num(inverseSubCipher(cipher), c3)
applycipher.num(inverseSubCipher(cipher), c3) == p3
all(applycipher.num(inverseSubCipher(cipher), c3) == p3)
source("breakSubCypher.R")
ls
cipher = createSubCiph(alphlength=length(lotwfullalph))
cipher
c3 = applycipher.num(cipher, p3)
c3
res = breakCipher(c3, beta2, P.log2, lotwfullalph, 1000)
res
source("breakSubCypher.R")
res = breakCipher(c3, beta2, P.log2, lotwfullalph, 1000)
source("breakSubCypher.R")
res = breakCipher(c3, beta2, P.log2, lotwfullalph, 1000)
source("breakSubCypher.R")
res = breakCipher(c3, beta2, P.log2, lotwfullalph, 1000)
source("breakSubCypher.R")
res = breakCipher(c3, beta2, P.log2, lotwfullalph, 1000)
source("breakSubCypher.R")
res = breakCipher(c3, beta2, P.log2, lotwfullalph, 1000)
source("breakSubCypher.R")
res = breakCipher(c3, beta2, P.log2, lotwfullalph, 1000)
res
cipher
inverseSubC(cipher)
inverseSubCipher(cipher)
writeResult(pq, c3, lotwfullalph)
writeResult(res, c3, lotwfullalph)
source("breakSubCypher.R")
res = breakCipher(c3, beta2, P.log2, lotwfullalph, 1000)
res
writeResult(res, c3, lotwfullalph)
lotwfullalph
cipher = c(25, 2:25, 26, 27:64)
cipher
applycipher.num(cipher, p3)
convertNumericToMessage(applycipher.num(cipher, p3), lotwfullalph)
paste(convertNumericToMessage(applycipher.num(cipher, p3), lotwfullalph), collapse='')
cipher
cipher = c(26, 2:25, 1, 27:64)
paste(convertNumericToMessage(applycipher.num(cipher, p3), lotwfullalph), collapse='')
inverseSubCipher(cipher)
c3 = applycipher.num(cipher, p3), lotwfullalph)
c3 = applycipher.num(cipher, p3)
c3
res = breakCipher(c3, beta2, P.log2, lotwfullalph, 1000
res
cipher
writeResult(res, c3, lotwfullalph)
source("breakSubCypher.R")
source("breakSubCypher.R")
cipher = createSubCiph(alphlength=lenth(lotwfullalph))
cipher = createSubCiph(alphlength=length(lotwfullalph))
cipher
p3
p3[1] + 2
p3[1] + 2 + 1 + 0.3
p3[1]
cipher
c3 = applycipher.num(cipher, p3)
pg[1:10]
p3[1:10]
c3[1:10]
cipher
match(35, cipher)
cipher[35]
beta
beta2
p3[1:10]
c3[1:19]
beta2
match(37, cipher)
source("breakSubCypher.R")
res = breakCipher(n3, beta2, P.log2, lotwfullalph, 1000)
res = breakCipher(c3, beta2, P.log2, lotwfullalph, 1000)
cipher
cipher[50]
cipher[13]
all(0)
all(c(0))
length(lotwfullalph)
c3
convertMessageToNumeric(c3, lotwfullalph)
convertNumericToMessage(c3, lotwfullalph)
paste(convertNumericToMessage(c3, lotwfullalph), collapse='')
cipher
setseed(1)
set.seed(1)
sample(1:10)
sample(1:10)
sample(1:10)
set.seed(1)
sample(1:10)
source("breakSubCypher.R")
set.seed(1)
breakCipher(c3, beta2, P.log2, lotwfullalph, 10)
source("breakSubCypher.R")
set.seed(1)
breakCipher(c3, beta2, P.log2, lotwfullalph, 10)
rbinom(1,1,1)
rbinom(1,1,1)
rbinom(1,1,1)
rbinom(1,1,2)
source("breakSubCypher.R")
res = breakCipher(c3, beta2, P.log2, lotwfullalph, 10)
source("breakSubCypher.R")
res = breakCipher(c3, beta2, P.log2, lotwfullalph, 1000)
source("breakSubCypher.R")
res = breakCipher(c3, beta2, P.log2, lotwfullalph, 1000)
res
source("breakSubCypher.R")
res = breakCipher(c3, beta2, P.log2, lotwfullalph, 1000)
res$data
cipher
res = breakCipher(c3, beta2, P.log2, lotwfullalph, 10000)
res$data
cipher
writeResult(res, c3, lotwfullalph)
res$priorities
cipher4 = createSubCiph(alphlength=length(lotwfullalph))
p3
p4 = c4
p4 = p3
p4
c4 = applycipher.num(cipher2, p4)
c4 = applycipher.num(cipher4, p4)
res = breakCipher(c4, beta2, P.log2, lotwfullalph, 10000)
writeResult(res, c4, lotwfullalph)
cipher2
cipher4
res$data
cipher4
res = breakCipher(c4, beta2, P.log2, lotwfullalph, 10000)
writeResult(res, c4, lotwfullalph)
res
cipher2
cipher4
res = breakCipher(c4, beta2, P.log2, lotwfullalph, 10000)
source("breakSubCypher.R")
res = breakCipher(c4, beta2, P.log2, lotwfullalph, 10000)
writeResult(res, c4, lotwfullalph)
res
beta2
res = breakCipher(c4, beta2, P.log2, lotwfullalph, 10000)
res$data
cipher
res = breakCipher(c4, beta2, P.log2, lotwfullalph, 10000)
res$data
cipher
source("breakSubCypher.R")
cipher5 = createSubCiph(alphlength=length(lotwfullalph))
cipher5
c5 = applycipher.num(cipher5, p4)
p4
c5
cipher[35]
cipher[16]
c3[1:10]
p3[1:10]
cipher
p3[1:10]
cipher5
cipher5[35]
c5[1]
res = breakCipher(c5, beta2, P.log2, lotwfullalph, 10000)
res$data
cipher
res = breakCipher(c5, beta2, P.log2, lotwfullalph, 10000)
res$data
cipher5
source("breakSubCypher.R")
res = breakCipher(c5, beta2, P.log2, lotwfullalph, 10000)
res
cipher
writeResult(res, c5, lotwfullalph)
source("breakSubCypher.R"); set.seed(1)
convertNumericToMessage(c4, lotwfullalph)
convertNumericToMessage(c3, lotwfullalph)
cipher
cipher4
breakCipher(c3, beta2, P.log2, lotwfullalph, 10)
set.seed(1); res = breakCipher(c3, beta2, P.log2, lotwfullalph, 10)
source("breakSubCypher.R"); set.seed(1)
set.seed(1); res = breakCipher(c3, beta2, P.log2, lotwfullalph, 10)
set.seed(1); res = breakCipher(c3, beta2, P.log2, lotwfullalph, 20)
set.seed(1); res = breakCipher(c3, beta2, P.log2, lotwfullalph, 20)
source("breakSubCypher.R"); set.seed(1); res = breakCipher(c3, beta2, P.log2, lotwfullalph, 20)
source("breakSubCypher.R"); set.seed(1); res = breakCipher(c3, beta2, P.log2, lotwfullalph, 20)
source("breakSubCypher.R"); set.seed(1); res = breakCipher(c3, beta2, P.log2, lotwfullalph, 20)
source("breakSubCypher.R"); set.seed(1); res = breakCipher(c3, beta2, P.log2, lotwfullalph, 20)
source("breakSubCypher.R"); set.seed(1); res = breakCipher(c3, beta2, P.log2, lotwfullalph, 20)
source("breakSubCypher.R"); set.seed(1); res = breakCipher(c3, beta2, P.log2, lotwfullalph, 20)
source("breakSubCypher.R"); set.seed(1); res = breakCipher(c3, beta2, P.log2, lotwfullalph, 20)
source("breakSubCypher.R"); set.seed(1); res = breakCipher(c3, beta2, P.log2, lotwfullalph, 20)
source("breakSubCypher.R"); set.seed(1); res = breakCipher(c3, beta2, P.log2, lotwfullalph, 20)
source("breakSubCypher.R"); set.seed(1); res = breakCipher(c3, beta2, P.log2, lotwfullalph, 20)
source("breakSubCypher.R"); set.seed(1); res = breakCipher(c3, beta2, P.log2, lotwfullalph, 20)
P.log2
source("breakSubCypher.R"); set.seed(1); res = breakCipher(c3, beta2, P.log2, lotwfullalph, 20)
beta2
beta2
source("breakSubCypher.R"); set.seed(1); res = breakCipher(c3, beta2, P.log2, lotwfullalph, 20)
cipher
q()
